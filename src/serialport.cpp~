/*
 * serialport.cpp
 * 1. communicate with controller
 * 2. Receive Data and publish topics
 * 3. Subscribe topic and send data
 * 4. Baudrate 1.5Mbps
 * 5. Defualt USB Port is ttyUSB0
 */
#include "ros/ros.h"
#include "std_msgs/MultiArrayLayout.h"
#include "std_msgs/MultiArrayDimension.h"
#include "std_msgs/Int32MultiArray.h"
#include <sstream>
#include <stdio.h>
#include <stdlib.h>
#include <unistd.h>
#include <fcntl.h>
#include <errno.h>
#include <termios.h>
#include <string.h>
#include <time.h>
#include <stdint.h>
#include <sys/types.h>
#include <sys/socket.h>
#include <netinet/in.h>
#include <netinet/tcp.h>
#include <netdb.h>
#include <assert.h>
#include <linux/serial.h>
#define BUF_LENGTH (21)
/* Struct */
typedef struct
{
  int start;
  char lastInData;
  char buf[25];
  int n;
  char sum;
  int error;
  // int ID;
  // int Flag;
  // int Index;
  // int SubIndex;
  // int Data;
  // msgType data;
}serialObj;
/* Public Variables */
serialObj serial;
int fd;
std_msgs::Int32MultiArray pos;
/*
 * Baudrate Table
 */
static int rate_to_constant(int baudrate)
{
#define B(x) case x: return B##x
  switch(baudrate)
    {
      B(50); B(75); B(110); B(134); B(150);
      B(200); B(300); B(600); B(1200); B(1800);
      B(2400); B(4800); B(9600); B(19200); B(38400);
      B(57600); B(115200); B(230400); B(460800); B(500000);
      B(576000); B(921600); B(1000000);B(1152000);B(1500000);
    default: return 0;
    }
#undef B
}
/*
 * Serial Port Object Parameters Initialize.
 */
void serialObjInit( void )
{
  serial.start = 0;
  serial.lastInData = 0;
  serial.n = 0;
  serial.sum =(char)(0xaa+0xfe);
  serial.error = 0;
}
/*
 * Print Error Message.
 */
void error(const char *msg)
{
  perror(msg);
  exit(0);
}
/*
 * Set the Serial Port Unblock.
 */
void set_nonblock(int socket)
{
  int flags;
  flags = fcntl(socket,F_GETFL,0);
  assert(flags != -1);
  fcntl(socket, F_SETFL, flags | O_NONBLOCK);
}
/*
 * Serial Port Init.
 * Attention: In this function, baud is not used.
 * To set baudrate, chage the B230400 to B115200 or some value else.
 */
int elCommInit(char *portName, int rate)
{
  struct termios options;
  int fd;
  char *ip;
  char *tcpPortNumString;
  long int tcpPortNum;
  int sockfd;
  struct sockaddr_in serv_addr;
  struct hostent *server;
  int rv;
  int speed =0;
  if (*portName == '/') { // linux serial port names always begin with /dev
    printf("Opening serial port %s\n", portName);
    //
    fd = open(portName, O_RDWR | O_NOCTTY | O_NDELAY);
    if (fd == -1){
      //Could not open the port.
      perror("init(): Unable to open serial port - ");
    }
    else
      {
	speed = rate_to_constant(rate);
	fcntl(fd, F_SETFL, FNDELAY);
	// Sets the read() function to return NOW and not wait for data to
	//enter buffer if there isn't anything there.
	//Configure port for 8N1 transmission
	tcgetattr(fd, &options); //Gets the current options for the port
	cfsetispeed(&options, speed ?: B38400); //Sets the Input Baud Rate
	cfsetospeed(&options, speed ?: B38400); //Sets the Output Baud Rate
	options.c_cflag |= (CLOCAL | CREAD);
	//? all these set options for 8N1 serial operations
	options.c_cflag &= ~PARENB;
	options.c_cflag &= ~CSTOPB;
	options.c_cflag &= ~CSIZE;
	options.c_cflag |= CS8;
	options.c_cflag &= ~CRTSCTS;
	options.c_lflag &= ~(ICANON | ECHO | ECHOE | ISIG); // set raw mode
	options.c_iflag &= ~(IXON | IXOFF | IXANY); // disable SW flow control
	options.c_iflag&=~(INLCR|ICRNL);
	options.c_oflag &= ~OPOST;
	options.c_oflag&=~(ONLCR|OCRNL);
	tcsetattr(fd, TCSANOW, &options);//Set the new options for the port"NOW"
      }
    return fd;
  }
  return -1;
}
/*
 * Send Message Function: Send a CAN Message via a Serial Port.
 */
void sendMessage(int fd, int pos1, int pos2, int pos3, int pos4, int cmd )
{
  char buf[24];
  char sum=0;
  int i=0;
  buf[0]=0xff;
  buf[1]=0x55;
  // pos1
  buf[2] = pos1>>24;
  buf[3] = pos1>>16;
  buf[4] = pos1>>8;
  buf[5] = pos1;
  // pos2
  buf[6] = pos2>>24;
  buf[7] = pos2>>16;
  buf[8] = pos2>>8;
  buf[9] = pos2;
  // pos3
  buf[10] = pos3>>24;
  buf[11] = pos3>>16;
  buf[12] = pos3>>8;
  buf[13] = pos3;
  // pos3
  buf[14] = pos4>>24;
  buf[15] = pos4>>16;
  buf[16] = pos4>>8;
  buf[17] = pos4;
  // cmd
  buf[18] = cmd>>24;
  buf[19] = cmd>>16;
  buf[20] = cmd>>8;
  buf[21] = cmd;
  // Sum
  for(i=0;i<22;i++)
    {
      sum += buf[i];
    }
  buf[22]=sum;
  write(fd,buf,23);
}
/*
 * Callback Fucntion: Subscribe messages and send them via serial port
 */
void callback( const std_msgs::Int32MultiArray::ConstPtr& msg )
{
   sendMessage(fd,msg->data[1],msg->data[2],msg->data[3],msg->data[4],msg->data[0]);
}
/*
 * Main Function.
 */
int main( int argc, char **argv )
{
  ros::init(argc,argv,"serialport");
  ros::NodeHandle n;
  ros::Rate loop_rate(1000);
  ros::Publisher pub=n.advertise<std_msgs::Int32MultiArray>("lightSensor",5);
  //  ros::Subscriber sub = n.subscribe("serialSend", 100,callback);
  std_msgs::Int32MultiArray JointPosition;
  int k;
  int id;
  char port[] = "/dev/ttyUSB0";
  //char port[] = "/dev/pts/9";
  char r[25];
  char inData;
  int i;
  pos.data.resize(10);
  serialObjInit();
  fd = elCommInit(port,115200);
  // fd = elCommInit(port,1500000);
  ROS_INFO("Baudrate 115200bps");
  //fd = serial_open(port,230400);
  if(fd>0)
    while(ros::ok())
      {
	k = read(fd,&r[0],sizeof(r));
	// printf("k is %d\n",k);
	if(k>0)
	  {
	    //r[k]='\0';
	    // printf("rk is %x\n",r[k]);
	    for(i=0;i<k;i++)
	      {
		inData = r[i];
		// printf("i is %d",i);
		// printf(",inData is %x\n",inData);
		if( ((inData&0xff) == 0xaa)&&((serial.lastInData&0xff) == 0xfe) )
		  {
		    serial.start |= 0x01;
		    serial.sum = (char)(0xaa+0xfe);
		  }
		serial.lastInData = inData;
		if( serial.start != 0 )
		  {
		    serial.buf[serial.n]=inData&0xff;
		    serial.n++;
		    // printf("here %d\n",serial.buf[serial.n]);
		    if( serial.n >BUF_LENGTH )
		      {
			for(serial.n=1;serial.n<BUF_LENGTH;serial.n++)
			  {
			    serial.sum += serial.buf[serial.n];
			    // printf("n is %d",serial.n);
			    // printf(",buf is %x",serial.buf[serial.n]);
			    // printf(",sum = %x\n",serial.sum);
			  }
			//printf("calc sum is %d\n",serial.sum);
			// printf("get sum is %d\n",serial.buf[BUF_LENGTH]);
			//printf("n is %d\n",serial.n);
			if( serial.sum == serial.buf[BUF_LENGTH] )
			  {
			    pos.data[0]=(((serial.buf[1]&0xff)<<8)+(serial.buf[2]&0xff));
			    pos.data[1]=(((serial.buf[3]&0xff)<<8)+(serial.buf[4]&0xff));
			    pos.data[2]=(((serial.buf[4]&0xff)<<8)+(serial.buf[6]&0xff));
			    pos.data[3]=(((serial.buf[5]&0xff)<<8)+(serial.buf[8]&0xff));
			    pos.data[4]=(((serial.buf[7]&0xff)<<8)+(serial.buf[10]&0xff));
			    pos.data[5]=(((serial.buf[9]&0xff)<<8)+(serial.buf[12]&0xff));
			    pos.data[6]=(((serial.buf[11]&0xff)<<8)+(serial.buf[14]&0xff));
			    pos.data[7]=(((serial.buf[13]&0xff)<<8)+(serial.buf[16]&0xff));
			    pos.data[8]=(((serial.buf[15]&0xff)<<8)+(serial.buf[18]&0xff));
			    pos.data[9]=(((serial.buf[17]&0xff)<<8)+(serial.buf[20]&0xff));
			    //ROS_INFO("Hear is pos1 %d",pos1);
			    pub.publish(pos);
			  }
			else
			  {
			    serial.error++;
			    // printf("calc sum is %x\n",serial.sum);
			    // printf("get sum is %x\n",serial.buf[BUF_LENGTH]);
			    // printf("n is %d\n",serial.n);
			    printf("Total error:%d\n",serial.error);
			  }
			serial.n = 0;
			serial.start = 0;
		      }
		  }
	      }
	  }
	ros::spinOnce();
	loop_rate.sleep();
      }
  return 0;
}
